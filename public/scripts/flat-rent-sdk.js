const database = [{
        id: 'vnd331',
        title: 'Radisson Royal Hotel',
        details: 'Отель расположен в 4 минутах ходьбы от станции метро «Маяковская». К услугам гостей фитнес-центр и спа-центр с сауной и гидромассажной ванной.',
        photos: ['vnd331.png', 'vnd331.png'],
        coordinates: [59.9322936, 30.3460129],
        bookedDates: [],
        price: 12000
    },
    {
        id: 'ab2e2',
        title: 'Номера на Садовой',
        details: 'Расположен в 7 минутах ходьбы от Невского проспекта. К услугам гостей круглосуточная стойка регистрации и бесплатный Wi-Fi.',
        photos: ['ab2e2.png', 'ab2e2.png'],
        coordinates: [59.930325, 30.3291592],
        bookedDates: [],
        price: 4500
    },
    {
        id: 'mvm32l',
        title: 'Мини Отель на Невском 136',
        details: 'Мини-отель расположен в Санкт-Петербурге, в 5 минутах ходьбы от станции метро «Площадь Восстания» и Московского железнодорожного вокзала.',
        photos: ['mvm32l.png', 'mvm32l.png'],
        coordinates: [59.9299603, 30.3658932],
        bookedDates: [],
        price: 3800
    },
    {
        id: 'bvep12',
        title: 'Отель Усадьба Державина',
        details: 'Прекрасный отель недалеко от Исаакиевского собора с бесплатным Wi-Fi на всей территории.',
        photos: ['bvep12.png', 'bvep12.png'],
        coordinates: [59.9194966, 30.309389],
        bookedDates: [],
        price: 8700
    }];
export function cloneDate(date) {
    return new Date(date.getTime());
}
export function addDays(date, days) {
    date.setDate(date.getDate() + days);
    return date;
}
export const backendPort = 3040;
export const localStorageKey = 'flat-rent-db';
export class FlatRentSdk {
    constructor() {
        this._generateTransactionId = () => {
            const min = 1000;
            const max = 9999;
            const num = Math.random() * (max - min) + min;
            return Math.floor(num);
        };
        if (this._readDatabase() == null) {
            this._writeDatabase(database);
        }
        this.database = this._readDatabase();
    }
    /**
     * Get flat by ID.
     *
     * @param {string} id Flat ID.
     * @returns {Promise<Object|null>} Flat.
     */
    get(id) {
        const flat = this.database.find((item) => {
            return item.id === id;
        });
        return Promise.resolve(flat == null ? flat : this._formatFlatObject(flat));
    }
    /**
     * Search for flats.
     *
     * @param {Object} parameters Search parameters
     * @param {string}parameters.city City name
     * @param {Date} parameters.checkInDate Check-in date
     * @param {Date} parameters.checkOutDate Check-out date
     * @param {number} [parameters.priceLimit] Max price for a night
     * @returns {Object[]} List of suitable flats.
     */
    search(parameters) {
        return new Promise((resolve, reject) => {
            try {
                if (parameters.city != 'Санкт-Петербург') {
                    throw new Error(`Passed unsupported city - "${parameters.city}".`);
                }
                if (!(parameters.checkInDate instanceof Date) || !(parameters.checkOutDate instanceof Date)) {
                    throw new Error(`Passed invalid check-in or check-out date - from "${parameters.checkInDate}" to "${parameters.checkOutDate}".`);
                }
                this._assertDatesAreCorrect(parameters.checkInDate, parameters.checkOutDate);
                if (parameters.priceLimit != null && (isNaN(parameters.priceLimit) || !isFinite(parameters.priceLimit))) {
                    throw new Error(`Passed invalid price limit - "${parameters.priceLimit}".`);
                }
                let flats = this.database;
                if (parameters.priceLimit != null) {
                    flats = flats.filter((flat) => {
                        return flat.price <= parameters.priceLimit;
                    });
                }
                const dateRange = this._generateDateRange(parameters.checkInDate, parameters.checkOutDate);
                flats = flats.filter((flat) => {
                    return this._areAllDatesAvailable(flat, dateRange);
                });
                flats = flats.map((flat) => {
                    return this._formatFlatObject(flat, dateRange.length - 1);
                });
                resolve(flats);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     * Book flat.
     *
     * @param {number} flatId
     * @param {Date} checkInDate
     * @param {Date} checkOutDate
     * @returns {number}
     */
    book(flatId, checkInDate, checkOutDate) {
        return new Promise((resolve, reject) => {
            try {
                const flat = this.database.find((item) => {
                    return item.id === flatId;
                });
                if (flat == null) {
                    throw new Error('There is no flat with ID "' + flatId + '".');
                }
                this._assertDatesAreCorrect(checkInDate, checkOutDate);
                const datesToBook = this._generateDateRange(checkInDate, checkOutDate);
                if (!this._areAllDatesAvailable(flat, datesToBook)) {
                    throw new Error(`Flat ${flat.id} is not available for dates ${datesToBook.join(',')}.`);
                }
                const bookedDates = datesToBook.map((date) => {
                    return date.getTime();
                });
                flat.bookedDates.push(...bookedDates);
                for (let i = 0; i < this.database.length; i++) {
                    if (this.database[i].id === flat.id) {
                        this.database[i] = flat;
                        break;
                    }
                }
                this._writeDatabase(this.database);
                resolve(this._generateTransactionId());
            }
            catch (error) {
                reject(error);
            }
        });
    }
    _assertDatesAreCorrect(checkInDate, checkOutDate) {
        const today = new Date();
        this._resetTime(today);
        this._resetTime(checkInDate);
        this._resetTime(checkOutDate);
        const diffToday = this._calculateDifferenceInDays(today, checkInDate);
        if (diffToday < 0) {
            throw new Error('Check-in date can\'t be in the past.');
        }
        const diffCheck = this._calculateDifferenceInDays(checkInDate, checkOutDate);
        if (diffCheck < 0) {
            throw new Error('Check-out date must be grater then check-in date.');
        }
    }
    _resetTime(date) {
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
    }
    _calculateDifferenceInDays(startDate, endDate) {
        const difference = endDate.getTime() - startDate.getTime();
        return Math.floor(difference / (1000 * 60 * 60 * 24));
    }
    _generateDateRange(from, to) {
        const dates = [];
        const differenceInDays = this._calculateDifferenceInDays(from, to);
        dates.push(new Date(from.getFullYear(), from.getMonth(), from.getDate()));
        for (let i = 1; i <= differenceInDays; i++) {
            dates.push(new Date(from.getFullYear(), from.getMonth(), from.getDate() + i));
        }
        return dates;
    }
    _areAllDatesAvailable(flat, dateRange) {
        return dateRange.every((date) => {
            return !flat.bookedDates.includes(date.getTime());
        });
    }
    _formatFlatObject(flat, nightNumber) {
        const formattedFlat = Object.assign({}, flat);
        formattedFlat.photos = formattedFlat.photos.map((photoUrl) => {
            return `http://localhost:${backendPort}/img/${photoUrl}`;
        });
        if (nightNumber != null) {
            formattedFlat.totalPrice = nightNumber * formattedFlat.price;
            delete formattedFlat.price;
        }
        return formattedFlat;
    }
    _readDatabase() {
        const data = window.localStorage.getItem(localStorageKey);
        if (data == null) {
            return data;
        }
        return JSON.parse(data);
    }
    _writeDatabase(database) {
        window.localStorage.setItem(localStorageKey, JSON.stringify(database));
    }
    _syncDatabase(database) {
        this._writeDatabase(database);
        this.database = this._readDatabase();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdC1yZW50LXNkay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mbGF0LXJlbnQtc2RrLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sUUFBUSxHQUFHLENBQUM7UUFDaEIsRUFBRSxFQUFFLFFBQVE7UUFDWixLQUFLLEVBQUUsc0JBQXNCO1FBQzdCLE9BQU8sRUFBRSxnSkFBZ0o7UUFDekosTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQztRQUNwQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDO1FBQ3JDLFdBQVcsRUFBRSxFQUFFO1FBQ2YsS0FBSyxFQUFFLEtBQUs7S0FDYjtJQUNEO1FBQ0UsRUFBRSxFQUFFLE9BQU87UUFDWCxLQUFLLEVBQUUsbUJBQW1CO1FBQzFCLE9BQU8sRUFBRSw2SEFBNkg7UUFDdEksTUFBTSxFQUFFLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQztRQUNsQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDO1FBQ3BDLFdBQVcsRUFBRSxFQUFFO1FBQ2YsS0FBSyxFQUFFLElBQUk7S0FDWjtJQUNEO1FBQ0UsRUFBRSxFQUFFLFFBQVE7UUFDWixLQUFLLEVBQUUsMkJBQTJCO1FBQ2xDLE9BQU8sRUFBRSwySUFBMkk7UUFDcEosTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQztRQUNwQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDO1FBQ3JDLFdBQVcsRUFBRSxFQUFFO1FBQ2YsS0FBSyxFQUFFLElBQUk7S0FDWjtJQUNEO1FBQ0UsRUFBRSxFQUFFLFFBQVE7UUFDWixLQUFLLEVBQUUseUJBQXlCO1FBQ2hDLE9BQU8sRUFBRSwwRkFBMEY7UUFDbkcsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQztRQUNwQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDO1FBQ3BDLFdBQVcsRUFB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QU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRTdDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUMzRCxPQUFPLG9CQUFvQixXQUFXLFFBQVEsUUFBUSxFQUFFLENBQUE7UUFDMUQsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLFdBQVcsSUFBSSxJQUFJLEVBQUU7WUFDdkIsYUFBYSxDQUFDLFVBQVUsR0FBRyxXQUFXLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQTtZQUM1RCxPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUE7U0FDM0I7UUFFRCxPQUFPLGFBQWEsQ0FBQTtJQUN0QixDQUFDO0lBRUQsYUFBYTtRQUNYLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1FBRXpELElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtZQUNoQixPQUFPLElBQUksQ0FBQTtTQUNaO1FBRUQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3pCLENBQUM7SUFFRCxjQUFjLENBQUMsUUFBUTtRQUNyQixNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO0lBQ3hFLENBQUM7SUFFRCxhQUFhLENBQUMsUUFBUTtRQUNwQixJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3RDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGRhdGFiYXNlID0gW3tcbiAgaWQ6ICd2bmQzMzEnLFxuICB0aXRsZTogJ1JhZGlzc29uIFJveWFsIEhvdGVsJyxcbiAgZGV0YWlsczogJ9Ce0YLQtdC70Ywg0YDQsNGB0L/QvtC70L7QttC10L0g0LIgNCDQvNC40L3Rg9GC0LDRhSDRhdC+0LTRjNCx0Ysg0L7RgiDRgdGC0LDQvdGG0LjQuCDQvNC10YLRgNC+IMKr0JzQsNGP0LrQvtCy0YHQutCw0Y/Cuy4g0Jog0YPRgdC70YPQs9Cw0Lwg0LPQvtGB0YLQtdC5INGE0LjRgtC90LXRgS3RhtC10L3RgtGAINC4INGB0L/QsC3RhtC10L3RgtGAINGBINGB0LDRg9C90L7QuSDQuCDQs9C40LTRgNC+0LzQsNGB0YHQsNC20L3QvtC5INCy0LDQvdC90L7QuS4nLFxuICBwaG90b3M6IFsndm5kMzMxLnBuZycsICd2bmQzMzEucG5nJ10sXG4gIGNvb3JkaW5hdGVzOiBbNTkuOTMyMjkzNiwgMzAuMzQ2MDEyOV0sXG4gIGJvb2tlZERhdGVzOiBbXSxcbiAgcHJpY2U6IDEyMDAwXG59LFxue1xuICBpZDogJ2FiMmUyJyxcbiAgdGl0bGU6ICfQndC+0LzQtdGA0LAg0L3QsCDQodCw0LTQvtCy0L7QuScsXG4gIGRldGFpbHM6ICfQoNCw0YHQv9C+0LvQvtC20LXQvSDQsiA3INC80LjQvdGD0YLQsNGFINGF0L7QtNGM0LHRiyDQvtGCINCd0LXQstGB0LrQvtCz0L4g0L/RgNC+0YHQv9C10LrRgtCwLiDQmiDRg9GB0LvRg9Cz0LDQvCDQs9C+0YHRgtC10Lkg0LrRgNGD0LPQu9C+0YHRg9GC0L7Rh9C90LDRjyDRgdGC0L7QudC60LAg0YDQtdCz0LjRgdGC0YDQsNGG0LjQuCDQuCDQsdC10YHQv9C70LDRgtC90YvQuSBXaS1GaS4nLFxuICBwaG90b3M6IFsnYWIyZTIucG5nJywgJ2FiMmUyLnBuZyddLFxuICBjb29yZGluYXRlczogWzU5LjkzMDMyNSwgMzAuMzI5MTU5Ml0sXG4gIGJvb2tlZERhdGVzOiBbXSxcbiAgcHJpY2U6IDQ1MDBcbn0sXG57XG4gIGlkOiAnbXZtMzJsJyxcbiAgdGl0bGU6ICfQnNC40L3QuCDQntGC0LXQu9GMINC90LAg0J3QtdCy0YHQutC+0LwgMTM2JyxcbiAgZGV0YWlsczogJ9Cc0LjQvdC4LdC+0YLQtdC70Ywg0YDQsNGB0L/QvtC70L7QttC10L0g0LIg0KHQsNC90LrRgi3Qn9C10YLQtdGA0LHRg9GA0LPQtSwg0LIgNSDQvNC40L3Rg9GC0LDRhSDRhdC+0LTRjNCx0Ysg0L7RgiDRgdGC0LDQvdGG0LjQuCDQvNC10YLRgNC+IMKr0J/Qu9C+0YnQsNC00Ywg0JLQvtGB0YHRgtCw0L3QuNGPwrsg0Lgg0JzQvtGB0LrQvtCy0YHQutC+0LPQviDQttC10LvQtdC30L3QvtC00L7RgNC+0LbQvdC+0LPQviDQstC+0LrQt9Cw0LvQsC4nLFxuICBwaG90b3M6IFsnbXZtMzJsLnBuZycsICdtdm0zMmwucG5nJ10sXG4gIGNvb3JkaW5hdGVzOiBbNTkuOTI5OTYwMywgMzAuMzY1ODkzMl0sXG4gIGJvb2tlZERhdGVzOiBbXSxcbiAgcHJpY2U6IDM4MDBcbn0sXG57XG4gIGlkOiAnYnZlcDEyJyxcbiAgdGl0bGU6ICfQntGC0LXQu9GMINCj0YHQsNC00YzQsdCwINCU0LXRgNC20LDQstC40L3QsCcsXG4gIGRldGFpbHM6ICfQn9GA0LXQutGA0LDRgdC90YvQuSDQvtGC0LXQu9GMINC90LXQtNCw0LvQtdC60L4g0L7RgiDQmNGB0LDQsNC60LjQtdCy0YHQutC+0LPQviDRgdC+0LHQvtGA0LAg0YEg0LHQtdGB0L/Qu9Cw0YLQvdGL0LwgV2ktRmkg0L3QsCDQstGB0LXQuSDRgtC10YDRgNC40YLQvtGA0LjQuC4nLFxuICBwaG90b3M6IFsnYnZlcDEyLnBuZycsICdidmVwMTIucG5nJ10sXG4gIGNvb3JkaW5hdGVzOiBbNTkuOTE5NDk2NiwgMzAuMzA5Mzg5XSxcbiAgYm9va2VkRGF0ZXM6IFtdLFxuICBwcmljZTogODcwMFxufV1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lRGF0ZShkYXRlKSB7XG4gIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZERheXMoZGF0ZSwgZGF5cykge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBkYXlzKVxuICByZXR1cm4gZGF0ZVxufVxuXG5leHBvcnQgY29uc3QgYmFja2VuZFBvcnQgPSAzMDQwXG5leHBvcnQgY29uc3QgbG9jYWxTdG9yYWdlS2V5ID0gJ2ZsYXQtcmVudC1kYidcblxuZXhwb3J0IGNsYXNzIEZsYXRSZW50U2RrIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWREYXRhYmFzZSgpID09IG51bGwpIHtcbiAgICAgIHRoaXMuX3dyaXRlRGF0YWJhc2UoZGF0YWJhc2UpXG4gICAgfVxuXG4gICAgdGhpcy5kYXRhYmFzZSA9IHRoaXMuX3JlYWREYXRhYmFzZSgpXG4gIH1cblxuICAvKipcbiAgICogR2V0IGZsYXQgYnkgSUQuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgRmxhdCBJRC5cbiAgICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0fG51bGw+fSBGbGF0LlxuICAgKi9cbiAgZ2V0KGlkKSB7XG4gICAgY29uc3QgZmxhdCA9IHRoaXMuZGF0YWJhc2UuZmluZCgoaXRlbSkgPT4ge1xuICAgICAgcmV0dXJuIGl0ZW0uaWQgPT09IGlkXG4gICAgfSlcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmxhdCA9PSBudWxsID8gZmxhdCA6IHRoaXMuX2Zvcm1hdEZsYXRPYmplY3QoZmxhdCkpXG4gIH1cblxuICAvKipcbiAgICogU2VhcmNoIGZvciBmbGF0cy5cbiAgICogXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJzIFNlYXJjaCBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSB7c3RyaW5nfXBhcmFtZXRlcnMuY2l0eSBDaXR5IG5hbWVcbiAgICogQHBhcmFtIHtEYXRlfSBwYXJhbWV0ZXJzLmNoZWNrSW5EYXRlIENoZWNrLWluIGRhdGVcbiAgICogQHBhcmFtIHtEYXRlfSBwYXJhbWV0ZXJzLmNoZWNrT3V0RGF0ZSBDaGVjay1vdXQgZGF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3BhcmFtZXRlcnMucHJpY2VMaW1pdF0gTWF4IHByaWNlIGZvciBhIG5pZ2h0XG4gICAqIEByZXR1cm5zIHtPYmplY3RbXX0gTGlzdCBvZiBzdWl0YWJsZSBmbGF0cy5cbiAgICovXG4gIHNlYXJjaChwYXJhbWV0ZXJzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLmNpdHkgIT0gJ9Ch0LDQvdC60YIt0J/QtdGC0LXRgNCx0YPRgNCzJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUGFzc2VkIHVuc3VwcG9ydGVkIGNpdHkgLSBcIiR7cGFyYW1ldGVycy5jaXR5fVwiLmApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIShwYXJhbWV0ZXJzLmNoZWNrSW5EYXRlIGluc3RhbmNlb2YgRGF0ZSkgfHwgIShwYXJhbWV0ZXJzLmNoZWNrT3V0RGF0ZSBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXNzZWQgaW52YWxpZCBjaGVjay1pbiBvciBjaGVjay1vdXQgZGF0ZSAtIGZyb20gXCIke3BhcmFtZXRlcnMuY2hlY2tJbkRhdGV9XCIgdG8gXCIke3BhcmFtZXRlcnMuY2hlY2tPdXREYXRlfVwiLmApXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXNzZXJ0RGF0ZXNBcmVDb3JyZWN0KHBhcmFtZXRlcnMuY2hlY2tJbkRhdGUsIHBhcmFtZXRlcnMuY2hlY2tPdXREYXRlKVxuXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLnByaWNlTGltaXQgIT0gbnVsbCAmJiAoaXNOYU4ocGFyYW1ldGVycy5wcmljZUxpbWl0KSB8fCAhaXNGaW5pdGUocGFyYW1ldGVycy5wcmljZUxpbWl0KSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhc3NlZCBpbnZhbGlkIHByaWNlIGxpbWl0IC0gXCIke3BhcmFtZXRlcnMucHJpY2VMaW1pdH1cIi5gKVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZsYXRzID0gdGhpcy5kYXRhYmFzZVxuXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLnByaWNlTGltaXQgIT0gbnVsbCkge1xuICAgICAgICAgIGZsYXRzID0gZmxhdHMuZmlsdGVyKChmbGF0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZmxhdC5wcmljZSA8PSBwYXJhbWV0ZXJzLnByaWNlTGltaXRcbiAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGF0ZVJhbmdlID0gdGhpcy5fZ2VuZXJhdGVEYXRlUmFuZ2UocGFyYW1ldGVycy5jaGVja0luRGF0ZSwgcGFyYW1ldGVycy5jaGVja091dERhdGUpXG4gICAgICAgIGZsYXRzID0gZmxhdHMuZmlsdGVyKChmbGF0KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2FyZUFsbERhdGVzQXZhaWxhYmxlKGZsYXQsIGRhdGVSYW5nZSlcbiAgICAgICAgfSlcblxuICAgICAgICBmbGF0cyA9IGZsYXRzLm1hcCgoZmxhdCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRGbGF0T2JqZWN0KGZsYXQsIGRhdGVSYW5nZS5sZW5ndGggLSAxKVxuICAgICAgICB9KVxuXG4gICAgICAgIHJlc29sdmUoZmxhdHMpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBCb29rIGZsYXQuXG4gICAqIFxuICAgKiBAcGFyYW0ge251bWJlcn0gZmxhdElkIFxuICAgKiBAcGFyYW0ge0RhdGV9IGNoZWNrSW5EYXRlIFxuICAgKiBAcGFyYW0ge0RhdGV9IGNoZWNrT3V0RGF0ZVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgYm9vayhmbGF0SWQsIGNoZWNrSW5EYXRlLCBjaGVja091dERhdGUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZmxhdCA9IHRoaXMuZGF0YWJhc2UuZmluZCgoaXRlbSkgPT4ge1xuICAgICAgICAgIHJldHVybiBpdGVtLmlkID09PSBmbGF0SWRcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoZmxhdCA9PSBudWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyBmbGF0IHdpdGggSUQgXCInICsgZmxhdElkICsgJ1wiLicpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXNzZXJ0RGF0ZXNBcmVDb3JyZWN0KGNoZWNrSW5EYXRlLCBjaGVja091dERhdGUpXG5cbiAgICAgICAgY29uc3QgZGF0ZXNUb0Jvb2sgPSB0aGlzLl9nZW5lcmF0ZURhdGVSYW5nZShjaGVja0luRGF0ZSwgY2hlY2tPdXREYXRlKVxuICAgICAgICBpZiAoIXRoaXMuX2FyZUFsbERhdGVzQXZhaWxhYmxlKGZsYXQsIGRhdGVzVG9Cb29rKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmxhdCAke2ZsYXQuaWR9IGlzIG5vdCBhdmFpbGFibGUgZm9yIGRhdGVzICR7ZGF0ZXNUb0Jvb2suam9pbignLCcpfS5gKVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYm9va2VkRGF0ZXMgPSBkYXRlc1RvQm9vay5tYXAoKGRhdGUpID0+IHtcbiAgICAgICAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKClcbiAgICAgICAgfSlcbiAgICAgICAgZmxhdC5ib29rZWREYXRlcy5wdXNoKC4uLmJvb2tlZERhdGVzKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YWJhc2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5kYXRhYmFzZVtpXS5pZCA9PT0gZmxhdC5pZCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhYmFzZVtpXSA9IGZsYXRcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dyaXRlRGF0YWJhc2UodGhpcy5kYXRhYmFzZSlcblxuICAgICAgICByZXNvbHZlKHRoaXMuX2dlbmVyYXRlVHJhbnNhY3Rpb25JZCgpKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBfYXNzZXJ0RGF0ZXNBcmVDb3JyZWN0KGNoZWNrSW5EYXRlLCBjaGVja091dERhdGUpIHtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKClcbiAgICB0aGlzLl9yZXNldFRpbWUodG9kYXkpXG4gICAgdGhpcy5fcmVzZXRUaW1lKGNoZWNrSW5EYXRlKVxuICAgIHRoaXMuX3Jlc2V0VGltZShjaGVja091dERhdGUpXG5cbiAgICBjb25zdCBkaWZmVG9kYXkgPSB0aGlzLl9jYWxjdWxhdGVEaWZmZXJlbmNlSW5EYXlzKHRvZGF5LCBjaGVja0luRGF0ZSlcbiAgICBpZiAoZGlmZlRvZGF5IDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaGVjay1pbiBkYXRlIGNhblxcJ3QgYmUgaW4gdGhlIHBhc3QuJylcbiAgICB9XG5cbiAgICBjb25zdCBkaWZmQ2hlY2sgPSB0aGlzLl9jYWxjdWxhdGVEaWZmZXJlbmNlSW5EYXlzKGNoZWNrSW5EYXRlLCBjaGVja091dERhdGUpXG4gICAgaWYgKGRpZmZDaGVjayA8IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2hlY2stb3V0IGRhdGUgbXVzdCBiZSBncmF0ZXIgdGhlbiBjaGVjay1pbiBkYXRlLicpXG4gICAgfVxuICB9XG5cbiAgX3Jlc2V0VGltZShkYXRlKSB7XG4gICAgZGF0ZS5zZXRIb3VycygwKVxuICAgIGRhdGUuc2V0TWludXRlcygwKVxuICAgIGRhdGUuc2V0U2Vjb25kcygwKVxuICAgIGRhdGUuc2V0TWlsbGlzZWNvbmRzKDApXG4gIH1cblxuICBfY2FsY3VsYXRlRGlmZmVyZW5jZUluRGF5cyhzdGFydERhdGUsIGVuZERhdGUpIHtcbiAgICBjb25zdCBkaWZmZXJlbmNlID0gZW5kRGF0ZS5nZXRUaW1lKCkgLSBzdGFydERhdGUuZ2V0VGltZSgpXG5cbiAgICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpKVxuICB9XG5cbiAgX2dlbmVyYXRlRGF0ZVJhbmdlKGZyb20sIHRvKSB7XG4gICAgY29uc3QgZGF0ZXMgPSBbXVxuICAgIGNvbnN0IGRpZmZlcmVuY2VJbkRheXMgPSB0aGlzLl9jYWxjdWxhdGVEaWZmZXJlbmNlSW5EYXlzKGZyb20sIHRvKVxuXG4gICAgZGF0ZXMucHVzaChuZXcgRGF0ZShmcm9tLmdldEZ1bGxZZWFyKCksIGZyb20uZ2V0TW9udGgoKSwgZnJvbS5nZXREYXRlKCkpKVxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGRpZmZlcmVuY2VJbkRheXM7IGkrKykge1xuICAgICAgZGF0ZXMucHVzaChuZXcgRGF0ZShmcm9tLmdldEZ1bGxZZWFyKCksIGZyb20uZ2V0TW9udGgoKSwgZnJvbS5nZXREYXRlKCkgKyBpKSlcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0ZXNcbiAgfVxuXG4gIF9nZW5lcmF0ZVRyYW5zYWN0aW9uSWQgPSAoKSA9PiB7XG4gICAgY29uc3QgbWluID0gMTAwMFxuICAgIGNvbnN0IG1heCA9IDk5OTlcbiAgICBjb25zdCBudW0gPSBNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbikgKyBtaW5cblxuICAgIHJldHVybiBNYXRoLmZsb29yKG51bSlcbiAgfVxuXG4gIF9hcmVBbGxEYXRlc0F2YWlsYWJsZShmbGF0LCBkYXRlUmFuZ2UpIHtcbiAgICByZXR1cm4gZGF0ZVJhbmdlLmV2ZXJ5KChkYXRlKSA9PiB7XG4gICAgICByZXR1cm4gIWZsYXQuYm9va2VkRGF0ZXMuaW5jbHVkZXMoZGF0ZS5nZXRUaW1lKCkpXG4gICAgfSlcbiAgfVxuXG4gIF9mb3JtYXRGbGF0T2JqZWN0KGZsYXQsIG5pZ2h0TnVtYmVyKSB7XG4gICAgY29uc3QgZm9ybWF0dGVkRmxhdCA9IE9iamVjdC5hc3NpZ24oe30sIGZsYXQpXG5cbiAgICBmb3JtYXR0ZWRGbGF0LnBob3RvcyA9IGZvcm1hdHRlZEZsYXQucGhvdG9zLm1hcCgocGhvdG9VcmwpID0+IHtcbiAgICAgIHJldHVybiBgaHR0cDovL2xvY2FsaG9zdDoke2JhY2tlbmRQb3J0fS9pbWcvJHtwaG90b1VybH1gXG4gICAgfSlcblxuICAgIGlmIChuaWdodE51bWJlciAhPSBudWxsKSB7XG4gICAgICBmb3JtYXR0ZWRGbGF0LnRvdGFsUHJpY2UgPSBuaWdodE51bWJlciAqIGZvcm1hdHRlZEZsYXQucHJpY2VcbiAgICAgIGRlbGV0ZSBmb3JtYXR0ZWRGbGF0LnByaWNlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdHRlZEZsYXRcbiAgfVxuXG4gIF9yZWFkRGF0YWJhc2UoKSB7XG4gICAgY29uc3QgZGF0YSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShsb2NhbFN0b3JhZ2VLZXkpXG5cbiAgICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZGF0YVxuICAgIH1cblxuICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpXG4gIH1cblxuICBfd3JpdGVEYXRhYmFzZShkYXRhYmFzZSkge1xuICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShsb2NhbFN0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KGRhdGFiYXNlKSlcbiAgfVxuXG4gIF9zeW5jRGF0YWJhc2UoZGF0YWJhc2UpIHtcbiAgICB0aGlzLl93cml0ZURhdGFiYXNlKGRhdGFiYXNlKVxuICAgIHRoaXMuZGF0YWJhc2UgPSB0aGlzLl9yZWFkRGF0YWJhc2UoKVxuICB9XG59XG4iXX0=