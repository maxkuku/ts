import { responseToJson, dateToUnixStamp } from './search.js';
import { localS } from './localStorage.js';
import { renderToast } from './lib.js';
export function book(placeId, checkInDate, checkOutDate) {
    if (placeId && checkInDate && checkOutDate) {
        const data = responseToJson(fetch(`http://localhost:3030/places/${placeId}?` +
            `checkInDate=${dateToUnixStamp(checkInDate)}&` +
            `checkOutDate=${dateToUnixStamp(checkOutDate)}&`, { method: 'PATCH' }));
        if (data) {
            // console.log(`booked: ${placeId}, chek in: ${checkInDate.getTime()}, check out: ${checkOutDate.getTime()}`)
            const bookRes = {
                'id': placeId,
                'checkIn': checkInDate.getTime(),
                'checkOut': checkOutDate.getTime()
            };
            renderToast({ text: `Подтвердите бронь номера <b>${placeId}</b> <br>с <i>${new Date(checkInDate).toLocaleString('en-CA')}</i> <br>по <i>${new Date(checkOutDate).toLocaleString('ru-RU')}</i>`, type: 'success' }, { name: 'Ок', handler: () => {
                    console.log('Уведомление закрыто');
                    localS.set('booked', bookRes);
                } });
        }
    }
    else {
        return false;
    }
}
export function bookStart() {
    document.querySelectorAll('.result-info--footer button').forEach((elt) => {
        elt.addEventListener('click', (ev) => {
            const checkInDate = new Date(document.getElementById('check-in-date').getAttribute('value'));
            const checkOutDate = new Date(document.getElementById('check-out-date').getAttribute('value'));
            const target = ev.target;
            const placeId = target.closest('.result').getAttribute('id').substring(5);
            console.log(`${placeId}, ${checkInDate}, ${checkOutDate}`);
            book(placeId, checkInDate, checkOutDate);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9va2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ib29raW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQzdELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUMxQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBS3RDLE1BQU0sVUFBVSxJQUFJLENBQUMsT0FBd0IsRUFBRSxXQUF3QixFQUFFLFlBQXlCO0lBSWhHLElBQUksT0FBTyxJQUFJLFdBQVcsSUFBSSxZQUFZLEVBQUU7UUFFMUMsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FDL0IsZ0NBQWdDLE9BQU8sR0FBRztZQUMxQyxlQUFlLGVBQWUsQ0FBQyxXQUFXLENBQUMsR0FBRztZQUM5QyxnQkFBZ0IsZUFBZSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQ2hELEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBQyxDQUNsQixDQUFDLENBQUM7UUFFSCxJQUFJLElBQUksRUFBRTtZQUVSLDZHQUE2RztZQUU3RyxNQUFNLE9BQU8sR0FBRztnQkFDZCxJQUFJLEVBQUUsT0FBTztnQkFDYixTQUFTLEVBQUUsV0FBVyxDQUFDLE9BQU8sRUFBRTtnQkFDaEMsVUFBVSxFQUFFLFlBQVksQ0FBQyxPQUFPLEVBQUU7YUFDbkMsQ0FBQTtZQUlELFdBQVcsQ0FDVCxFQUFFLElBQUksRUFBRSwrQkFBK0IsT0FBTyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUNyTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRTtvQkFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO29CQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUUsQ0FBQTtnQkFDaEMsQ0FBQyxFQUFFLENBQ0osQ0FBQTtTQUVGO0tBRUY7U0FDSTtRQUNILE9BQU8sS0FBSyxDQUFBO0tBQ2I7QUFDSCxDQUFDO0FBSUQsTUFBTSxVQUFVLFNBQVM7SUFFdkIsUUFBUSxDQUFDLGdCQUFnQixDQUFDLDZCQUE2QixDQUFDLENBQUMsT0FBTyxDQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDeEUsR0FBRyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQWMsRUFBRSxFQUFFO1lBSS9DLE1BQU0sV0FBVyxHQUFTLElBQUksSUFBSSxDQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFFLENBQUE7WUFDcEcsTUFBTSxZQUFZLEdBQVMsSUFBSSxJQUFJLENBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBRSxDQUFBO1lBR3ZHLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFpQixDQUFDO1lBQ3BDLE1BQU0sT0FBTyxHQUFvQixNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFHM0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sS0FBSyxXQUFXLEtBQUssWUFBWSxFQUFFLENBQUMsQ0FBQTtZQUMxRCxJQUFJLENBQUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUkzQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUwsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc3BvbnNlVG9Kc29uLCBkYXRlVG9Vbml4U3RhbXAgfSBmcm9tICcuL3NlYXJjaC5qcydcbmltcG9ydCB7IGxvY2FsUyB9IGZyb20gJy4vbG9jYWxTdG9yYWdlLmpzJ1xuaW1wb3J0IHsgcmVuZGVyVG9hc3QgfSBmcm9tICcuL2xpYi5qcydcblxuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGJvb2socGxhY2VJZDogc3RyaW5nIHwgbnVtYmVyLCBjaGVja0luRGF0ZTogRGF0ZSB8IG51bGwsIGNoZWNrT3V0RGF0ZTogRGF0ZSB8IG51bGwpIHtcblxuICBcblxuICBpZiAocGxhY2VJZCAmJiBjaGVja0luRGF0ZSAmJiBjaGVja091dERhdGUpIHtcblxuICAgIGNvbnN0IGRhdGEgPSByZXNwb25zZVRvSnNvbihmZXRjaChcbiAgICAgIGBodHRwOi8vbG9jYWxob3N0OjMwMzAvcGxhY2VzLyR7cGxhY2VJZH0/YCArXG4gICAgICBgY2hlY2tJbkRhdGU9JHtkYXRlVG9Vbml4U3RhbXAoY2hlY2tJbkRhdGUpfSZgICtcbiAgICAgIGBjaGVja091dERhdGU9JHtkYXRlVG9Vbml4U3RhbXAoY2hlY2tPdXREYXRlKX0mYCxcbiAgICAgIHttZXRob2Q6ICdQQVRDSCd9XG4gICAgKSk7XG5cbiAgICBpZiAoZGF0YSkge1xuXG4gICAgICAvLyBjb25zb2xlLmxvZyhgYm9va2VkOiAke3BsYWNlSWR9LCBjaGVrIGluOiAke2NoZWNrSW5EYXRlLmdldFRpbWUoKX0sIGNoZWNrIG91dDogJHtjaGVja091dERhdGUuZ2V0VGltZSgpfWApXG5cbiAgICAgIGNvbnN0IGJvb2tSZXMgPSB7XG4gICAgICAgICdpZCc6IHBsYWNlSWQsIFxuICAgICAgICAnY2hlY2tJbic6IGNoZWNrSW5EYXRlLmdldFRpbWUoKSwgXG4gICAgICAgICdjaGVja091dCc6IGNoZWNrT3V0RGF0ZS5nZXRUaW1lKClcbiAgICAgIH1cblxuICAgICAgXG5cbiAgICAgIHJlbmRlclRvYXN0KFxuICAgICAgICB7IHRleHQ6IGDQn9C+0LTRgtCy0LXRgNC00LjRgtC1INCx0YDQvtC90Ywg0L3QvtC80LXRgNCwIDxiPiR7cGxhY2VJZH08L2I+IDxicj7RgSA8aT4ke25ldyBEYXRlKGNoZWNrSW5EYXRlKS50b0xvY2FsZVN0cmluZygnZW4tQ0EnKX08L2k+IDxicj7Qv9C+IDxpPiR7bmV3IERhdGUoY2hlY2tPdXREYXRlKS50b0xvY2FsZVN0cmluZygncnUtUlUnKX08L2k+YCwgdHlwZTogJ3N1Y2Nlc3MnIH0sXG4gICAgICAgIHsgbmFtZTogJ9Ce0LonLCBoYW5kbGVyOiAoKSA9PiB7IFxuICAgICAgICAgIGNvbnNvbGUubG9nKCfQo9Cy0LXQtNC+0LzQu9C10L3QuNC1INC30LDQutGA0YvRgtC+JykgXG4gICAgICAgICAgbG9jYWxTLnNldCgnYm9va2VkJywgYm9va1JlcyApXG4gICAgICAgIH0gfVxuICAgICAgKVxuXG4gICAgfVxuXG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBib29rU3RhcnQoKTogYW55IHtcblxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucmVzdWx0LWluZm8tLWZvb3RlciBidXR0b24nKS5mb3JFYWNoKCAoZWx0KSA9PiB7XG4gICAgZWx0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG5cbiAgICAgIFxuXG4gICAgICBjb25zdCBjaGVja0luRGF0ZTogRGF0ZSA9IG5ldyBEYXRlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hlY2staW4tZGF0ZScpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSApXG4gICAgICBjb25zdCBjaGVja091dERhdGU6IERhdGUgPSBuZXcgRGF0ZSAoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGVjay1vdXQtZGF0ZScpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSApXG5cbiAgICAgIFxuICAgICAgY29uc3QgdGFyZ2V0ID0gZXYudGFyZ2V0IGFzIEVsZW1lbnQ7XG4gICAgICBjb25zdCBwbGFjZUlkOiBzdHJpbmcgfCBudW1iZXIgPSB0YXJnZXQuY2xvc2VzdCgnLnJlc3VsdCcpLmdldEF0dHJpYnV0ZSgnaWQnKS5zdWJzdHJpbmcoNSk7XG4gICAgICBcblxuICAgICAgY29uc29sZS5sb2coYCR7cGxhY2VJZH0sICR7Y2hlY2tJbkRhdGV9LCAke2NoZWNrT3V0RGF0ZX1gKVxuICAgICAgYm9vayhwbGFjZUlkLCBjaGVja0luRGF0ZSwgY2hlY2tPdXREYXRlKTtcblxuXG4gICAgICBcbiAgICB9KTtcbiAgfSk7XG5cbn1cblxuXG5cblxuXG5cblxuXG5cblxuXG4iXX0=