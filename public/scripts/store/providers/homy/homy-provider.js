import { HttpHelper } from '../../utils/http-helper.js';
import { CRoom } from '../../domain/room.js';
import { dateToUnixStamp } from '../../../search.js';
export class HomyProvider {
    find(filter) {
        return HttpHelper.fetchAsJson(HomyProvider.apiUrl + '/places?' +
            this.convertFilterToQueryString(filter))
            .then((response) => {
            this.assertIsValidResponse(response);
            return this.convertRoomListResponse(response);
        });
    }
    getByParams(checkInDate, checkOutDate, maxPrice) {
        return HttpHelper.fetchAsJson(`${HomyProvider.apiUrl}/places?checkInDate=${dateToUnixStamp(checkInDate)}&checkOutDate=${dateToUnixStamp(checkOutDate)}&coordinates=59.9386,30.3141&price=${maxPrice}`)
            .then((response) => {
            this.assertIsValidResponse(response);
            return this.convertRoomResponse(response.items);
        });
    }
    assertIsValidResponse(response) {
        if (response.errorMessage !== null) {
            throw new Error(response.errorMessage);
        }
    }
    convertFilterToQueryString(filter) {
        return `checkInDate=${dateToUnixStamp(filter.checkInDate)}&checkOutDate=${dateToUnixStamp(filter.checkOutDate)}&maxPrice=${filter.maxPrice}`;
    }
    convertRoomListResponse(response) {
        return response.items.map(item => {
            return this.convertRoomResponse(item);
        });
    }
    convertRoomResponse(item) {
        return new CRoom(HomyProvider.provider, String(item.placeId), item.name, item.description, item.image, item.remoteness, item.provider, item.bookedDates, item.price);
    }
}
HomyProvider.provider = 'homy';
HomyProvider.apiUrl = 'http://localhost:3030';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9teS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zdG9yZS9wcm92aWRlcnMvaG9teS9ob215LXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFNUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBR3BELE1BQU0sT0FBTyxZQUFZO0lBTWhCLElBQUksQ0FBQyxNQUFvQjtRQUM5QixPQUFPLFVBQVUsQ0FBQyxXQUFXLENBRTNCLFlBQVksQ0FBQyxNQUFNLEdBQUcsVUFBVTtZQUVoQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQ3hDO2FBQ0UsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDakIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBRXBDLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQy9DLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUdNLFdBQVcsQ0FFaEIsV0FBaUIsRUFDakIsWUFBa0IsRUFDbEIsUUFBaUI7UUFFakIsT0FBTyxVQUFVLENBQUMsV0FBVyxDQUUzQixHQUFHLFlBQVksQ0FBQyxNQUFNLHVCQUF1QixlQUFlLENBQUMsV0FBVyxDQUFDLGlCQUFpQixlQUFlLENBQUMsWUFBWSxDQUFDLHNDQUFzQyxRQUFRLEVBQUUsQ0FFeEs7YUFDRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUVqQixJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUE7WUFFcEMsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ2pELENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUdPLHFCQUFxQixDQUFDLFFBQTJCO1FBQ3ZELElBQUksUUFBUSxDQUFDLFlBQVksS0FBSyxJQUFJLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUE7U0FDdkM7SUFDSCxDQUFDO0lBR08sMEJBQTBCLENBQUMsTUFBb0I7UUFDckQsT0FBTyxlQUFlLGVBQWUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGlCQUFpQixlQUFlLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFhLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUM5SSxDQUFDO0lBR08sdUJBQXVCLENBQUMsUUFBMkI7UUFDekQsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFHTyxtQkFBbUIsQ0FBQyxJQUFJO1FBQzlCLE9BQU8sSUFBSSxLQUFLLENBQ2QsWUFBWSxDQUFDLFFBQVEsRUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFDcEIsSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsS0FBSyxDQUNYLENBQUE7SUFDSCxDQUFDOztBQXRFYSxxQkFBUSxHQUFHLE1BQU0sQ0FBQTtBQUVoQixtQkFBTSxHQUFHLHVCQUF1QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3Byb3ZpZGVyLmpzJ1xuaW1wb3J0IHsgU2VhcmNoRmlsdGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3NlYXJjaC1maWx0ZXIuanMnXG5pbXBvcnQgeyBIdHRwSGVscGVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvaHR0cC1oZWxwZXIuanMnXG5pbXBvcnQgeyBDUm9vbSB9IGZyb20gJy4uLy4uL2RvbWFpbi9yb29tLmpzJ1xuaW1wb3J0IHsgSVJvb20sIElSb29tTGlzdFJlc3BvbnNlIH0gZnJvbSAnLi9yZXNwb25zZS5qcydcbmltcG9ydCB7IGRhdGVUb1VuaXhTdGFtcCB9IGZyb20gJy4uLy4uLy4uL3NlYXJjaC5qcydcblxuXG5leHBvcnQgY2xhc3MgSG9teVByb3ZpZGVyIGltcGxlbWVudHMgUHJvdmlkZXIge1xuXG4gIHB1YmxpYyBzdGF0aWMgcHJvdmlkZXIgPSAnaG9teSdcblxuICBwcml2YXRlIHN0YXRpYyBhcGlVcmwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDMwJ1xuXG4gIHB1YmxpYyBmaW5kKGZpbHRlcjogU2VhcmNoRmlsdGVyKSB7XG4gICAgcmV0dXJuIEh0dHBIZWxwZXIuZmV0Y2hBc0pzb248SVJvb21MaXN0UmVzcG9uc2U+KFxuXG4gICAgICBIb215UHJvdmlkZXIuYXBpVXJsICsgJy9wbGFjZXM/JyArXG4gICAgICBcbiAgICAgIHRoaXMuY29udmVydEZpbHRlclRvUXVlcnlTdHJpbmcoZmlsdGVyKVxuICAgIClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICB0aGlzLmFzc2VydElzVmFsaWRSZXNwb25zZShyZXNwb25zZSlcblxuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0Um9vbUxpc3RSZXNwb25zZShyZXNwb25zZSlcbiAgICAgIH0pXG4gIH1cblxuXG4gIHB1YmxpYyBnZXRCeVBhcmFtcyhcbiAgICBcbiAgICBjaGVja0luRGF0ZTogRGF0ZSwgXG4gICAgY2hlY2tPdXREYXRlOiBEYXRlLCBcbiAgICBtYXhQcmljZT86IG51bWJlclxuICApIHtcbiAgICByZXR1cm4gSHR0cEhlbHBlci5mZXRjaEFzSnNvbjxJUm9vbUxpc3RSZXNwb25zZT4oXG5cbiAgICAgIGAke0hvbXlQcm92aWRlci5hcGlVcmx9L3BsYWNlcz9jaGVja0luRGF0ZT0ke2RhdGVUb1VuaXhTdGFtcChjaGVja0luRGF0ZSl9JmNoZWNrT3V0RGF0ZT0ke2RhdGVUb1VuaXhTdGFtcChjaGVja091dERhdGUpfSZjb29yZGluYXRlcz01OS45Mzg2LDMwLjMxNDEmcHJpY2U9JHttYXhQcmljZX1gXG5cbiAgICApXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcblxuICAgICAgICB0aGlzLmFzc2VydElzVmFsaWRSZXNwb25zZShyZXNwb25zZSlcblxuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0Um9vbVJlc3BvbnNlKHJlc3BvbnNlLml0ZW1zKVxuICAgICAgfSlcbiAgfVxuXG5cbiAgcHJpdmF0ZSBhc3NlcnRJc1ZhbGlkUmVzcG9uc2UocmVzcG9uc2U6IElSb29tTGlzdFJlc3BvbnNlKTogdm9pZCB7XG4gICAgaWYgKHJlc3BvbnNlLmVycm9yTWVzc2FnZSAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLmVycm9yTWVzc2FnZSlcbiAgICB9XG4gIH1cblxuXG4gIHByaXZhdGUgY29udmVydEZpbHRlclRvUXVlcnlTdHJpbmcoZmlsdGVyOiBTZWFyY2hGaWx0ZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBgY2hlY2tJbkRhdGU9JHtkYXRlVG9Vbml4U3RhbXAoZmlsdGVyLmNoZWNrSW5EYXRlKX0mY2hlY2tPdXREYXRlPSR7ZGF0ZVRvVW5peFN0YW1wKGZpbHRlci5jaGVja091dERhdGUpfSZtYXhQcmljZT0ke2ZpbHRlci5tYXhQcmljZX1gXG4gIH1cblxuXG4gIHByaXZhdGUgY29udmVydFJvb21MaXN0UmVzcG9uc2UocmVzcG9uc2U6IElSb29tTGlzdFJlc3BvbnNlKSA6IENSb29tW10ge1xuICAgIHJldHVybiByZXNwb25zZS5pdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5jb252ZXJ0Um9vbVJlc3BvbnNlKGl0ZW0pXG4gICAgfSlcbiAgfVxuXG5cbiAgcHJpdmF0ZSBjb252ZXJ0Um9vbVJlc3BvbnNlKGl0ZW0gKSB7XG4gICAgcmV0dXJuIG5ldyBDUm9vbShcbiAgICAgIEhvbXlQcm92aWRlci5wcm92aWRlcixcbiAgICAgIFN0cmluZyhpdGVtLnBsYWNlSWQpLFxuICAgICAgaXRlbS5uYW1lLFxuICAgICAgaXRlbS5kZXNjcmlwdGlvbixcbiAgICAgIGl0ZW0uaW1hZ2UsXG4gICAgICBpdGVtLnJlbW90ZW5lc3MsXG4gICAgICBpdGVtLnByb3ZpZGVyLFxuICAgICAgaXRlbS5ib29rZWREYXRlcyxcbiAgICAgIGl0ZW0ucHJpY2VcbiAgICApXG4gIH1cbn0iXX0=