import { localS } from './localStorage.js';
export function toggleFavoriteItem() {
    setTimeout(() => {
        document.querySelectorAll('[data-fav]').forEach((item) => {
            item.addEventListener('click', (event) => {
                if (!(event.target instanceof HTMLDivElement)) {
                    return;
                }
                else {
                    const target = event.target;
                    const id = target.dataset.fav;
                    if (!item.classList.contains('active')) {
                        const id = event.target.dataset.fav.toString();
                        const favoriteItems = localS.get('favoriteItems');
                        const favItemsObj = JSON.parse(favoriteItems);
                        const newItemToLS = { 'id': id,
                            'name': target.closest('.result-container').querySelectorAll('.result-info--header p')[0].textContent,
                            'image': target.closest('.result-container').querySelectorAll('.result-img')[0].getAttribute('src')
                        };
                        if (favItemsObj == null) {
                            const favItemsNew = [];
                            favItemsNew.push(newItemToLS);
                            localS.set('favoriteItems', JSON.parse(JSON.stringify(favItemsNew)));
                        }
                        else {
                            favItemsObj.push(newItemToLS);
                            localS.set('favoriteItems', favItemsObj);
                        }
                        target.classList.add('active');
                    }
                    else {
                        const favoriteItems = localS.get('favoriteItems');
                        const favoriteObj = JSON.parse(favoriteItems);
                        favoriteObj.forEach((favorite, index) => {
                            if (favorite.id === id) {
                                favoriteObj.splice(index, 1);
                            }
                        });
                        if (favoriteObj.length) {
                            localS.set('favoriteItems', favoriteObj);
                        }
                        target.classList.remove('active');
                    }
                }
                const favLocalVal = localS.get('favoriteItems');
                const favoritesAmount = JSON.parse(favLocalVal);
                if (favoritesAmount) {
                    const len = +favoritesAmount.length;
                    const favoritesCount = len || 0;
                    document.querySelectorAll('p.fav')[0].innerHTML = `<i class="heart-icon active"></i>${favoritesCount}`;
                }
            });
        });
    }, 1000);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlRmF2b3JpdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RvZ2dsZUZhdm9yaXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFLMUMsTUFBTSxVQUFVLGtCQUFrQjtJQUloQyxVQUFVLENBQUUsR0FBRyxFQUFFO1FBQ2YsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3ZELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFJdkMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sWUFBWSxjQUFjLENBQUMsRUFBRTtvQkFDN0MsT0FBTztpQkFDUjtxQkFDSTtvQkFDSCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBd0IsQ0FBQztvQkFDOUMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUE7b0JBRzdCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRTt3QkFDdEMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFBO3dCQUM5QyxNQUFNLGFBQWEsR0FBUSxNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO3dCQUN2RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO3dCQUc3QyxNQUFNLFdBQVcsR0FBRyxFQUFDLElBQUksRUFBRSxFQUFFOzRCQUMzQixNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVzs0QkFDckcsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO3lCQUNwRyxDQUFBO3dCQUVELElBQUksV0FBVyxJQUFJLElBQUksRUFBRTs0QkFDdkIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDOzRCQUN2QixXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBOzRCQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO3lCQUN0RTs2QkFDSTs0QkFDSCxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBOzRCQUM3QixNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQzt5QkFDMUM7d0JBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7cUJBRWhDO3lCQUNJO3dCQUNILE1BQU0sYUFBYSxHQUFRLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7d0JBQ3ZELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7d0JBRTlDLFdBQVcsQ0FBQyxPQUFPLENBQUUsQ0FBQyxRQUFtQixFQUFFLEtBQWEsRUFBRSxFQUFFOzRCQUMxRCxJQUFJLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFO2dDQUN0QixXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzs2QkFDOUI7d0JBQ0gsQ0FBQyxDQUFDLENBQUE7d0JBQ0YsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFOzRCQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQzt5QkFDMUM7d0JBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7cUJBQ25DO2lCQU1GO2dCQUVELE1BQU0sV0FBVyxHQUFRLE1BQU0sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7Z0JBQ3BELE1BQU0sZUFBZSxHQUFlLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzVELElBQUksZUFBZSxFQUFFO29CQUVuQixNQUFNLEdBQUcsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUE7b0JBQ25DLE1BQU0sY0FBYyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUM7b0JBR2hDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUcsb0NBQW9DLGNBQWMsRUFBRSxDQUFBO2lCQUN2RztZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUE7QUFFVCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBsb2NhbFMgfSBmcm9tICcuL2xvY2FsU3RvcmFnZS5qcydcbmltcG9ydCB7IFRGYXZvcml0ZSwgVEZhdm9yaXRlcyB9IGZyb20gJy4vdHlwZXMuanMnXG5cblxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlRmF2b3JpdGVJdGVtICgpIHtcblxuICBcblxuICBzZXRUaW1lb3V0KCAoKSA9PiB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtZmF2XScpLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcblxuICAgICAgICBcblxuICAgICAgICBpZiAoIShldmVudC50YXJnZXQgaW5zdGFuY2VvZiBIVE1MRGl2RWxlbWVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxEaXZFbGVtZW50O1xuICAgICAgICAgIGNvbnN0IGlkID0gdGFyZ2V0LmRhdGFzZXQuZmF2XG5cblxuICAgICAgICAgIGlmICghaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGV2ZW50LnRhcmdldC5kYXRhc2V0LmZhdi50b1N0cmluZygpXG4gICAgICAgICAgICBjb25zdCBmYXZvcml0ZUl0ZW1zOiBhbnkgPSBsb2NhbFMuZ2V0KCdmYXZvcml0ZUl0ZW1zJyk7XG4gICAgICAgICAgICBjb25zdCBmYXZJdGVtc09iaiA9IEpTT04ucGFyc2UoZmF2b3JpdGVJdGVtcylcbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBjb25zdCBuZXdJdGVtVG9MUyA9IHsnaWQnOiBpZCwgXG4gICAgICAgICAgICAgICduYW1lJzogdGFyZ2V0LmNsb3Nlc3QoJy5yZXN1bHQtY29udGFpbmVyJykucXVlcnlTZWxlY3RvckFsbCgnLnJlc3VsdC1pbmZvLS1oZWFkZXIgcCcpWzBdLnRleHRDb250ZW50LCBcbiAgICAgICAgICAgICAgJ2ltYWdlJzogdGFyZ2V0LmNsb3Nlc3QoJy5yZXN1bHQtY29udGFpbmVyJykucXVlcnlTZWxlY3RvckFsbCgnLnJlc3VsdC1pbWcnKVswXS5nZXRBdHRyaWJ1dGUoJ3NyYycpIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmF2SXRlbXNPYmogPT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb25zdCBmYXZJdGVtc05ldyA9IFtdO1xuICAgICAgICAgICAgICBmYXZJdGVtc05ldy5wdXNoKG5ld0l0ZW1Ub0xTKVxuICAgICAgICAgICAgICBsb2NhbFMuc2V0KCdmYXZvcml0ZUl0ZW1zJywgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShmYXZJdGVtc05ldykpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBmYXZJdGVtc09iai5wdXNoKG5ld0l0ZW1Ub0xTKVxuICAgICAgICAgICAgICBsb2NhbFMuc2V0KCdmYXZvcml0ZUl0ZW1zJywgZmF2SXRlbXNPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmYXZvcml0ZUl0ZW1zOiBhbnkgPSBsb2NhbFMuZ2V0KCdmYXZvcml0ZUl0ZW1zJyk7XG4gICAgICAgICAgICBjb25zdCBmYXZvcml0ZU9iaiA9IEpTT04ucGFyc2UoZmF2b3JpdGVJdGVtcyk7XG5cbiAgICAgICAgICAgIGZhdm9yaXRlT2JqLmZvckVhY2goIChmYXZvcml0ZTogVEZhdm9yaXRlLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChmYXZvcml0ZS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICBmYXZvcml0ZU9iai5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKGZhdm9yaXRlT2JqLmxlbmd0aCkge1xuICAgICAgICAgICAgICBsb2NhbFMuc2V0KCdmYXZvcml0ZUl0ZW1zJywgZmF2b3JpdGVPYmopO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgfVxuXG5cblxuICAgICAgICAgIFxuICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmF2TG9jYWxWYWw6IGFueSA9IGxvY2FsUy5nZXQoJ2Zhdm9yaXRlSXRlbXMnKVxuICAgICAgICBjb25zdCBmYXZvcml0ZXNBbW91bnQ6IFRGYXZvcml0ZXMgPSBKU09OLnBhcnNlKGZhdkxvY2FsVmFsKTtcbiAgICAgICAgaWYgKGZhdm9yaXRlc0Ftb3VudCkge1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGxlbiA9ICtmYXZvcml0ZXNBbW91bnQubGVuZ3RoXG4gICAgICAgICAgY29uc3QgZmF2b3JpdGVzQ291bnQgPSBsZW4gfHwgMDtcbiAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncC5mYXYnKVswXS5pbm5lckhUTUwgPSBgPGkgY2xhc3M9XCJoZWFydC1pY29uIGFjdGl2ZVwiPjwvaT4ke2Zhdm9yaXRlc0NvdW50fWBcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9LDEwMDApXG5cbn0iXX0=