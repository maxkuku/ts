import { Product } from './product.js';
export class Book extends Product {
    constructor(name, genre, price, author, reviews) {
        super(price);
        this.name = name;
        this.genre = genre;
        this.author = author;
        if (reviews) {
            this.reviews = reviews;
        }
        else {
            this.reviews = [];
        }
        this.calculateRating();
    }
    get rating() {
        return this._rating;
    }
    getReviews() {
        return this.reviews;
    }
    getProductDescription() {
        return `Book "${this.name}" by ${this.author.firstName} ${this.author.lastName}`;
    }
    addReview(review) {
        this.reviews.push(review);
        this.calculateRating();
    }
    removeReview(review) {
        const index = this.reviews.indexOf(review);
        if (index > -1) {
            this.reviews.splice(index, 1);
            this.calculateRating();
        }
    }
    calculateRating() {
        if (this.reviews.length > 0) {
            const reviewSum = this.reviews.reduce((acc, review) => { return acc + review[1]; }, 0);
            this._rating = reviewSum / this.reviews.length;
        }
        else {
            this._rating = null;
        }
    }
    calculateDiscount(context) {
        if (context.cart.items >= Book.itemsForIncreaseDiscount && context.cart.totalSum >= Book.sumForIncreasedDiscount) {
            return this.price * 35 / 100;
        }
        else {
            return super.calculateDiscount(context);
        }
    }
}
Book.itemsForIncreaseDiscount = 3;
Book.sumForIncreasedDiscount = 3000;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ib29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFLdEMsTUFBTSxPQUFPLElBQUssU0FBUSxPQUFPO0lBUS9CLFlBQ1MsSUFBWSxFQUNaLEtBQVksRUFDbkIsS0FBYSxFQUNOLE1BQXVCLEVBQzlCLE9BQWtCO1FBSWxCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQVJMLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFPO1FBRVosV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFPOUIsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtTQUFFO2FBQ3JCO1lBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUE7U0FDbEI7UUFFRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7SUFHeEIsQ0FBQztJQUdELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQTtJQUNyQixDQUFDO0lBR0QsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQTtJQUNyQixDQUFDO0lBSUQscUJBQXFCO1FBQ25CLE9BQU8sU0FBUyxJQUFJLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUE7SUFFbEYsQ0FBQztJQUdELFNBQVMsQ0FBQyxNQUFhO1FBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ3pCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBR0QsWUFBWSxDQUFDLE1BQWE7UUFDeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFM0MsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDN0IsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFBO1NBQ3ZCO0lBQ0gsQ0FBQztJQUlPLGVBQWU7UUFDckIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsR0FBSyxPQUFPLEdBQUcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFFdkYsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUE7U0FDL0M7YUFDSTtZQUNILElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFBO1NBQ3BCO0lBQ0gsQ0FBQztJQUdTLGlCQUFpQixDQUFDLE9BQXdCO1FBQ2xELElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLHdCQUF3QixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUNoSCxPQUFPLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQTtTQUM3QjthQUNJO1lBQ0gsT0FBTyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUE7U0FDeEM7SUFDSCxDQUFDOztBQWxGYyw2QkFBd0IsR0FBRyxDQUFDLENBQUE7QUFDNUIsNEJBQXVCLEdBQUcsSUFBSSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBBdXRob3IgfSBmcm9tICcuL2F1dGhvci5qcydcbmltcG9ydCB7IFJhdGluZ2FibGUgfSBmcm9tICcuL3JhdGluZ2FibGUuanMnXG5pbXBvcnQgeyBQcm9kdWN0IH0gZnJvbSAnLi9wcm9kdWN0LmpzJ1xuaW1wb3J0IHsgUmV2aWV3LCBHZW5yZSB9IGZyb20gJy4vdHlwZXMuanMnXG5pbXBvcnQgeyBQdXJjaGFzZUNvbnRleHQgfSBmcm9tICcuL3B1cmNoYXNlLWNvbnRleHQuanMnXG5cblxuZXhwb3J0IGNsYXNzIEJvb2sgZXh0ZW5kcyBQcm9kdWN0IGltcGxlbWVudHMgUmF0aW5nYWJsZSB7IFxuICBcbiAgcHJpdmF0ZSBzdGF0aWMgaXRlbXNGb3JJbmNyZWFzZURpc2NvdW50ID0gM1xuICBwcml2YXRlIHN0YXRpYyBzdW1Gb3JJbmNyZWFzZWREaXNjb3VudCA9IDMwMDBcblxuICBwcml2YXRlIHJldmlld3M6IFJldmlld1tdXG4gIHByaXZhdGUgX3JhdGluZzogbnVtYmVyXG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIGdlbnJlOiBHZW5yZSxcbiAgICBwcmljZTogbnVtYmVyLFxuICAgIHB1YmxpYyBhdXRob3I6IFBhcnRpYWw8QXV0aG9yPixcbiAgICByZXZpZXdzPzogUmV2aWV3W10sXG4gIClcbiAge1xuXG4gICAgc3VwZXIocHJpY2UpXG4gICAgXG4gICAgaWYgKHJldmlld3MpIHtcbiAgICAgIHRoaXMucmV2aWV3cyA9IHJldmlld3MgfSBcbiAgICBlbHNlIHtcbiAgICAgIHRoaXMucmV2aWV3cyA9IFtdIFxuICAgIH1cblxuICAgIHRoaXMuY2FsY3VsYXRlUmF0aW5nKClcblxuICAgIFxuICB9XG5cblxuICBnZXQgcmF0aW5nKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3JhdGluZ1xuICB9XG5cblxuICBnZXRSZXZpZXdzKCk6IFJlYWRvbmx5PFJldmlld1tdPiB7XG4gICAgcmV0dXJuIHRoaXMucmV2aWV3c1xuICB9XG5cblxuXG4gIGdldFByb2R1Y3REZXNjcmlwdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiBgQm9vayBcIiR7dGhpcy5uYW1lfVwiIGJ5ICR7dGhpcy5hdXRob3IuZmlyc3ROYW1lfSAke3RoaXMuYXV0aG9yLmxhc3ROYW1lfWBcblxuICB9XG5cblxuICBhZGRSZXZpZXcocmV2aWV3OlJldmlldyk6IHZvaWQge1xuICAgIHRoaXMucmV2aWV3cy5wdXNoKHJldmlldylcbiAgICB0aGlzLmNhbGN1bGF0ZVJhdGluZygpXG4gIH1cblxuXG4gIHJlbW92ZVJldmlldyhyZXZpZXc6UmV2aWV3KTogdm9pZCB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLnJldmlld3MuaW5kZXhPZihyZXZpZXcpO1xuXG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMucmV2aWV3cy5zcGxpY2UoaW5kZXgsIDEpXG4gICAgICB0aGlzLmNhbGN1bGF0ZVJhdGluZygpXG4gICAgfVxuICB9XG5cblxuXG4gIHByaXZhdGUgY2FsY3VsYXRlUmF0aW5nKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnJldmlld3MubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcmV2aWV3U3VtID0gdGhpcy5yZXZpZXdzLnJlZHVjZSgoYWNjLCByZXZpZXcpID0+ICB7ICByZXR1cm4gYWNjICsgcmV2aWV3WzFdIH0sIDApXG5cbiAgICAgIHRoaXMuX3JhdGluZyA9IHJldmlld1N1bSAvIHRoaXMucmV2aWV3cy5sZW5ndGhcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9yYXRpbmcgPSBudWxsXG4gICAgfVxuICB9XG5cblxuICBwcm90ZWN0ZWQgY2FsY3VsYXRlRGlzY291bnQoY29udGV4dDogUHVyY2hhc2VDb250ZXh0KTogbnVtYmVyIHtcbiAgICBpZiAoY29udGV4dC5jYXJ0Lml0ZW1zID49IEJvb2suaXRlbXNGb3JJbmNyZWFzZURpc2NvdW50ICYmIGNvbnRleHQuY2FydC50b3RhbFN1bSA+PSBCb29rLnN1bUZvckluY3JlYXNlZERpc2NvdW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmljZSAqIDM1IC8gMTAwXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHN1cGVyLmNhbGN1bGF0ZURpc2NvdW50KGNvbnRleHQpXG4gICAgfVxuICB9XG5cblxufVxuXG5cblxuXG4iXX0=